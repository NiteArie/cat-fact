{"version":3,"sources":["components/Header/Header.js","components/FactPresentation/FactPresentation.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","FactPresentation","className","this","props","catFact","App","state","show","fetch","then","response","json","data","setState","text","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAceA,G,6LATP,OACI,gCACI,wDACA,gE,GALKC,IAAMC,YCgBZC,G,uLAdP,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAYC,KAAKC,MAAMC,QAAW,cAAgB,IAE9CF,KAAKC,MAAMC,QACT,uBAAGH,UAAU,WAAWC,KAAKC,MAAMC,SACnC,S,GARIN,IAAMC,YCsCtBM,E,YAnCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXF,QAAS,GACTG,MAAM,GAJI,E,iFAQO,IAAD,OAOlBC,MAFiB,uCAEH,kEANG,MAMH,mBALD,IAMVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZT,QAASQ,EAAKE,Y,+BAOpB,OACE,yBAAKC,MAAM,OACT,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAkBX,QAASF,KAAKI,MAAMF,e,GA9B5BN,IAAMC,WCOJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.9ebac9ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1>GET YOUR DAILY CAT FACTS</h1>\r\n                <h2>JUST BY REFRESHING THE PAGE</h2>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './FactPresentation.css';\r\n\r\nclass FactPresentation extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"div-layer-1\">\r\n                <div className={(this.props.catFact) ? 'div-layer-2' : ''}>\r\n                    {\r\n                        (this.props.catFact)\r\n                         ? <p className=\"content\">{this.props.catFact}</p>\r\n                         : ''\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FactPresentation;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport FactPresentation from './components/FactPresentation/FactPresentation';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      catFact: '',\n      show: false,\n    }\n  }\n\n  componentDidMount() {\n    let animalType = 'cat';\n    let amount = 1;\n\n    //https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n\n    fetch(proxyUrl + `https://cat-fact.herokuapp.com/facts/random?animal_type=${animalType}&amount=${amount}`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          catFact: data.text,\n        })\n      });\n  }\n\n\n  render() {\n    return (\n      <div class=\"App\">\n        <Header />\n        <FactPresentation catFact={this.state.catFact}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}